{"version":3,"sources":["components/landingpage.js","components/aboutme.js","components/contact.js","components/projects.js","components/resume.js","components/main.js","App.js","serviceWorker.js","index.js"],"names":["Landing","react_default","a","createElement","React","Component","About","Contact","Projects","Resume","Main","Switch","Route","exact","path","component","App","className","lib","title","scroll","Link","to","main","Boolean","window","location","hostname","match","ReactDOM","render","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAEqBA,mLAEb,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kCAJqBC,IAAMC,WCAtBC,mLAEb,OACIL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,gCAJmBC,IAAMC,WCApBE,mLAEb,OACIN,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,kCAJqBC,IAAMC,WCAtBG,mLAEb,OACIP,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCAJsBC,IAAMC,WCAvBI,mLAEb,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCAJoBC,IAAMC,WCgB3BK,EAVF,kBACTT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWf,IACjCC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWT,IAClCL,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,WAAWC,UAAWR,IAClCN,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,YAAYC,UAAWP,IACnCP,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAOE,KAAK,UAAUC,UAAWN,eCuB1BO,mLA7BX,OACEf,EAAAC,EAAAC,cAAA,OAAKc,UAAU,oBACXhB,EAAAC,EAAAC,cAACe,EAAA,OAAD,KACIjB,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQC,MAAM,QAAQC,QAAM,GACxBnB,EAAAC,EAAAC,cAACe,EAAA,WAAD,KACEjB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,WAAT,UACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,YACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,aAAT,YACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,aAGNrB,EAAAC,EAAAC,cAACe,EAAA,OAAD,CAAQC,MAAM,SACVlB,EAAAC,EAAAC,cAACe,EAAA,WAAD,KACEjB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,WAAT,UACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,YACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,aAAT,YACArB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAMC,GAAG,YAAT,aAGNrB,EAAAC,EAAAC,cAACe,EAAA,QAAD,KACIjB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,iBACfhB,EAAAC,EAAAC,cAACoB,EAAD,gBAvBAlB,yBCMEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wECTNC,IAASC,OACL7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACI9B,EAAAC,EAAAC,cAAC6B,EAAD,OAENC,SAASC,eAAe,SDgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.28ca2c36.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nexport default class Landing extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Landing Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class About extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>About Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class Contact extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Contact Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class Projects extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Projects Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class Resume extends React.Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>Resume Page</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport Landing from './landingpage';\r\nimport About from './aboutme';\r\nimport Contact from './contact';\r\nimport Projects from './projects';\r\nimport Resume from './resume';\r\n\r\nconst Main = () => (\r\n    <Switch>\r\n        <Route exact path=\"/\" component={Landing}/>\r\n        <Route path=\"/aboutme\" component={About}/>\r\n        <Route path=\"/contact\" component={Contact}/>\r\n        <Route path=\"/projects\" component={Projects}/>\r\n        <Route path=\"/resume\" component={Resume}/>\r\n    </Switch>\r\n)\r\n\r\nexport default Main;","import React, { Component } from 'react';\nimport './App.css';\nimport { Layout, Header, Navigation, Drawer, Content } from 'react-mdl';\nimport Main from './components/main';\nimport { Link } from 'react-router-dom';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"demo-big-content\">\n          <Layout>\n              <Header title=\"Title\" scroll>\n                  <Navigation>\n                    <Link to=\"/resume\">Resume</Link>\n                    <Link to=\"/aboutme\">About Me</Link>\n                    <Link to=\"/projects\">Projects</Link>\n                    <Link to=\"/contact\">Contact</Link>\n                  </Navigation>\n              </Header>\n              <Drawer title=\"Title\">\n                  <Navigation>\n                    <Link to=\"/resume\">Resume</Link>\n                    <Link to=\"/aboutme\">About Me</Link>\n                    <Link to=\"/projects\">Projects</Link>\n                    <Link to=\"/contact\">Contact</Link>\n                  </Navigation>\n              </Drawer>\n              <Content>\n                  <div className=\"page-content\" />\n                  <Main />\n              </Content>\n          </Layout>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}